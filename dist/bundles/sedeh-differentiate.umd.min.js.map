{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://@sedeh/differentiate/src/app/differentiate/interfaces/differentiate.interfaces.ts","ng://@sedeh/differentiate/src/app/differentiate/components/differentiate.component.ts","ng://@sedeh/differentiate/src/app/differentiate/components/differentiate-tree.component.ts","ng://@sedeh/differentiate/src/app/differentiate/differentiate.module.ts"],"names":["DifferentiateNodeType","DifferentiateNodeStatus","__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","DifferentiateComponent","this","allowRevert","allowAdvance","attributeOrderIsImportant","onlyShowDifferences","leftSideToolTip","rightSideToolTip","onrevert","EventEmitter","onadvance","ondifference","prototype","value","replace","categorizeBy","split","undefined","generateNodeId","Math","floor","random","transformNodeToOriginalStructure","node","parent","_this","json","array","map","item","status","removed","type","literal","push","pair","name","x","children","transformNodeToInternalStruction","result","Array","children_1","p_1","jsonValue","sort","a","b","index","altName","id","default","list","keys","children_2","p_2","itemInArray","side","String","toUpperCase","leftItemFromRightItem","leftNode","rightNode","compare","typeChanged","counterpart","valueChanged","nameChanged","unify","reIndex","copyInto","newItem","JSON","parse","stringify","splice","setChildrenStatus","leftSide","rightSide","j","looping","leftItemInRightSide","rightItemInLeftSide","added","toInternalStruction","filterUnchanged","ngOnChanges","changes","leftSideObject","namedRootObject","rightSideObject","ready","ngOnInit","setTimeout","init","categorizedName","category","sideCategorizedName","names","child","join","collapsed","left","right","comparision","expanded","isRoot","fireCountDifference","count","listItem","emit","lookupChildOf","parentObject","foundItem","performAdvanceToRight","leftSideInfo","rightSideInfo","modifiedChildren","performAdvanceToLeft","advance","event","parseInt","path","autoExpand","lc","rc","onhover","hover","tslib_1.__decorate","Input","Output","Component","selector","template","DifferentiateTree","showLeftActionButton","showRightActionButton","level","objectPath","onexpand","depth","bubleup","keyup","which","click","changCounter","expand","advanceToRightSide","advanceToLeftSide","mouseOvered","flag","preventDefault","stopPropagation","DifferentiateModule","NgModule","imports","CommonModule","declarations","exports","entryComponents","providers","schemas","CUSTOM_ELEMENTS_SCHEMA"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","\r\nexport enum DifferentiateNodeType {\r\n  literal = 1,\r\n  pair = 2,\r\n  json = 3,\r\n  array = 4\r\n}\r\nexport enum DifferentiateNodeStatus {\r\n  default = 1,\r\n  typeChanged = 2,\r\n  nameChanged = 3,\r\n  valueChanged = 4,\r\n  added = 5,\r\n  removed = 6\r\n}\r\nexport interface DifferentiateNode {\r\n  id: number,\r\n  counterpart?: number,\r\n  index: number,\r\n  name: string,\r\n  altName: string,\r\n  value: string,\r\n  parent: DifferentiateNodeType,\r\n  type: DifferentiateNodeType,\r\n  children: DifferentiateNode[],\r\n  status: DifferentiateNodeStatus,\r\n  isRoot?: boolean\r\n}\r\n\r\n","/*\r\n * Comparision Tool will layout two comparision trees side by side and feed them an internal object\r\n * heirarchy created for internal use from JSON objects given to this component.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DifferentiateNode,\r\n  DifferentiateNodeType,\r\n  DifferentiateNodeStatus\r\n} from '../interfaces/differentiate.interfaces';\r\nimport { ThrowStmt } from '@angular/compiler';\r\n\r\n@Component({\r\n  selector: 'differentiate',\r\n  templateUrl: './differentiate.component.html',\r\n  styleUrls: ['./differentiate.component.scss'],\r\n})\r\nexport class DifferentiateComponent implements OnInit, OnChanges {\r\n  \r\n  leftSide;\r\n  rightSide;\r\n  ready: boolean;\r\n  categorizeBy: string[];\r\n\r\n  @Input(\"allowRevert\")\r\n  allowRevert = false;\r\n\r\n  @Input(\"allowAdvance\")\r\n  allowAdvance = false;\r\n\r\n  @Input(\"attributeOrderIsImportant\")\r\n  attributeOrderIsImportant = true;\r\n\r\n  @Input(\"onlyShowDifferences\")\r\n  onlyShowDifferences = false;\r\n\r\n  @Input(\"leftSideObject\")\r\n  leftSideObject\r\n\r\n  @Input(\"rightSideObject\")\r\n  rightSideObject;\r\n\r\n  @Input(\"leftSideToolTip\")\r\n  leftSideToolTip = \"take left side\";\r\n\r\n  @Input(\"rightSideToolTip\")\r\n  rightSideToolTip = \"take right side\";\r\n\r\n  @Input('namedRootObject')\r\n  set namedRootObject(value: string) {\r\n    let x = value.replace(\" \", \"\");\r\n\r\n    if (x.length) {\r\n      this.categorizeBy = value.split(\",\");\r\n    } else {\r\n      this.categorizeBy = undefined;\r\n    }\r\n  }\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  @Output(\"onadvance\")\r\n  onadvance = new EventEmitter();\r\n\r\n  @Output(\"ondifference\")\r\n  ondifference = new EventEmitter();\r\n\r\n  constructor(\t) {\r\n\t  \r\n  }\r\n  private generateNodeId() {\r\n    const min = 1;\r\n    const max = 10000\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  private transformNodeToOriginalStructure(node, parent) {\r\n    let json = {};\r\n    let array = [];\r\n\r\n    node.map( (item: DifferentiateNode) => {\r\n      if (item.status !== DifferentiateNodeStatus.removed) {\r\n        if (parent === DifferentiateNodeType.json) {    \r\n          if (item.type === DifferentiateNodeType.literal) {\r\n            array.push(item.value);\r\n          } else if (item.type === DifferentiateNodeType.pair) {\r\n            json[item.name] = item.value;\r\n          } else if (item.type === DifferentiateNodeType.array) {\r\n            const x = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n            if (item.name.length) {\r\n              json[item.name] = x;\r\n            } else {\r\n              json = [x];\r\n            }\r\n          } else if (item.type === DifferentiateNodeType.json) {\r\n            json[item.name] = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n          }\r\n        } else if (parent === DifferentiateNodeType.array){\r\n          if (item.type === DifferentiateNodeType.literal) {\r\n            array.push(item.value);\r\n          } else if (item.type === DifferentiateNodeType.json) {\r\n            array.push(this.transformNodeToOriginalStructure(item.children, item.parent));\r\n          } else if (item.type === DifferentiateNodeType.array) {\r\n            array.push(this.transformNodeToOriginalStructure(item.children, item.parent));\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return array.length ? array : json;\r\n  }\r\n  private transformNodeToInternalStruction(node) {\r\n    let result = node;\r\n    if (node instanceof Array) {\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.array;\r\n      node.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(item);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) =>{\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.literal,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }      \r\n      });\r\n      result = children;\r\n    } else if (node instanceof Object) {\r\n      const list = Object.keys(node);\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.json;\r\n      if (!this.attributeOrderIsImportant) {\r\n        list.sort((a,b) => {return a <= b ? -1: 1});\r\n      }\r\n      list.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(node[item]);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) => {\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.json,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.pair,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }\r\n      });\r\n      result = children;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private itemInArray(side: DifferentiateNode[], node: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    const key = node.type === DifferentiateNodeType.literal ?\r\n                (node.value ? String(node.value).toUpperCase() : \"\") :\r\n                node.type === DifferentiateNodeType.array ?\r\n                node.altName :\r\n                node.name;\r\n\r\n    side.map( (item: DifferentiateNode) => {\r\n      if (item.type === DifferentiateNodeType.literal) {\r\n        if (item.value && String(item.value).toUpperCase() === key) {\r\n          result = item;\r\n        }  \r\n      } else if (item.type === DifferentiateNodeType.array) {\r\n        if (item.altName === key) {\r\n          result = item;\r\n        }  \r\n      } else {\r\n        if (item.name === key) {\r\n          result = item;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private leftItemFromRightItem(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    if (!leftNode || !rightNode) {\r\n      return result;\r\n    }\r\n    const key = rightNode.type === DifferentiateNodeType.literal ?\r\n                    (rightNode.value ? rightNode.value.toUpperCase() : \"\") :\r\n                    rightNode.type === DifferentiateNodeType.array ?\r\n                    rightNode.altName :\r\n                    rightNode.name;\r\n\r\n    if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value && String(leftNode.value).toUpperCase() === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else if (leftNode.type === DifferentiateNodeType.array) {\r\n      if (leftNode.altName === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else {\r\n      if (leftNode.name === key) {\r\n        result = leftNode;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private compare(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    if (leftNode.type !== rightNode.type) {\r\n      leftNode.status = DifferentiateNodeStatus.typeChanged;\r\n      rightNode.status = DifferentiateNodeStatus.typeChanged;\r\n      leftNode.counterpart = rightNode.id;\r\n      rightNode.counterpart = leftNode.id;\r\n    } else if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else if (leftNode.type === DifferentiateNodeType.pair) {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      this.unify(leftNode.children, rightNode.children);\r\n    }\r\n  }\r\n  private reIndex(list: DifferentiateNode[]) {\r\n    list.map((item, i) => {\r\n      item.index = i;\r\n      this.reIndex(item.children);\r\n    });\r\n  }\r\n  private copyInto(\r\n              side: DifferentiateNode[],\r\n              item: DifferentiateNode,\r\n              index: number,\r\n              status: DifferentiateNodeStatus) {\r\n    \r\n    if (item) {\r\n      const newItem = JSON.parse(JSON.stringify(item));\r\n      side.splice(index, 0, newItem);\r\n      this.reIndex(side);\r\n  \r\n      item.status = status;\r\n      newItem.status = status;\r\n      item.counterpart = newItem.id;\r\n      newItem.counterpart = item.id;\r\n      this.setChildrenStatus(item.children, status)\r\n      this.setChildrenStatus(newItem.children, status)\r\n    }\r\n  }\r\n  private setChildrenStatus(list, status){\r\n    list.map( (x) => {\r\n      x.status = status;\r\n      this.setChildrenStatus(x.children, status)\r\n    });\r\n  }\r\n  private unify(leftSide: DifferentiateNode[], rightSide: DifferentiateNode[]) {\r\n    let i = 0, j = 0, looping = true;\r\n\r\n    while (looping) {\r\n      let leftItemInRightSide: DifferentiateNode = i < leftSide.length ? this.itemInArray(rightSide, leftSide[i]) : undefined;\r\n      let rightItemInLeftSide: DifferentiateNode = j < rightSide.length ? this.itemInArray(leftSide, rightSide[j]) : undefined;\r\n\r\n      if (!leftItemInRightSide && i < leftSide.length) {\r\n        if (!rightSide.length) {\r\n          while (i < leftSide.length) {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!rightItemInLeftSide && j < rightSide.length) {\r\n        if (!leftSide.length) {\r\n          while (j < rightSide.length) {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!leftItemInRightSide) {\r\n        leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n      }\r\n      if (!rightItemInLeftSide) {\r\n        rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n      }\r\n      if (leftItemInRightSide && leftItemInRightSide.index !== i) {\r\n        while (i < leftSide.length) {\r\n          leftItemInRightSide = this.leftItemFromRightItem(rightSide[i], leftSide[i]);\r\n          if (leftItemInRightSide) {\r\n            leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        }  \r\n      }\r\n      if (rightItemInLeftSide && rightItemInLeftSide.index !== j) {\r\n        while (j < rightSide.length) {\r\n          rightItemInLeftSide = this.leftItemFromRightItem(leftSide[j], rightSide[j]);\r\n          if (rightItemInLeftSide) {\r\n            rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        }\r\n      }\r\n      if (leftItemInRightSide && i < leftSide.length) {\r\n        let x = this.itemInArray(rightSide, leftSide[i]);\r\n        if (x && x.index !== leftItemInRightSide.index) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n          leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n        }\r\n      }\r\n      if (rightItemInLeftSide && j < rightSide.length) {\r\n        let x = this.itemInArray(leftSide, rightSide[j]);\r\n        if (x && x.index !== rightItemInLeftSide.index) {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n          rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && rightItemInLeftSide) {\r\n        if (leftItemInRightSide.parent !== rightItemInLeftSide.parent) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n        } else {\r\n          this.compare(leftItemInRightSide, rightItemInLeftSide);\r\n        }\r\n        j++;i++;\r\n      }\r\n      looping = (i < leftSide.length || j < rightSide.length);\r\n    }\r\n  }\r\n  private toInternalStruction(leftNode, rightNode) {\r\n    const result = {\r\n      leftSide: this.transformNodeToInternalStruction(leftNode),\r\n      rightSide: this.transformNodeToInternalStruction(rightNode)\r\n    };\r\n    this.unify(result.leftSide, result.rightSide);\r\n\r\n    if (this.onlyShowDifferences) {\r\n      result.leftSide = this.filterUnchanged(result.leftSide);\r\n      result.rightSide = this.filterUnchanged(result.rightSide);\r\n    }\r\n  \r\n    return result;\r\n  }\r\n  private filterUnchanged(list: DifferentiateNode[]) {\r\n    const result = [];\r\n    \r\n    list.map( (item) => {\r\n      item.children = this.filterUnchanged(item.children);\r\n      if ((item.type > DifferentiateNodeType.pair && item.children.length) ||\r\n          item.status !== DifferentiateNodeStatus.default) {\r\n        result.push(item);\r\n      }\r\n    });\r\n    result.map( (x: DifferentiateNode, i) => {\r\n      x.index = i;\r\n      x.altName = \"\" + i;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.attributeOrderIsImportant ||\r\n      changes.onlyShowDifferences ||\r\n      changes.leftSideObject ||\r\n      changes.namedRootObject ||\r\n      changes.rightSideObject) {\r\n      this.ready = false;\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    setTimeout(()=>this.init(),666);\r\n  }\r\n  private categorizedName(item) {\r\n    let name = \"\";\r\n    this.categorizeBy.map((category) => {\r\n      if (item.name === category) {\r\n        name = item.value;\r\n      }\r\n    });\r\n    return name;\r\n  }\r\n  private sideCategorizedName(side) {\r\n    side.map( (item) => {\r\n      const names = [];\r\n      item.children.map((child) => {\r\n        const name = this.categorizedName(child);\r\n        if(String(name).length) {\r\n          names.push(name);\r\n        }\r\n      });\r\n      item.categorizeBy = names.length > 1 ? names.join(\" - \") : names[0];\r\n      item.collapsed = true;\r\n    });\r\n  }\r\n  private init() {\r\n    if (this.leftSideObject && this.rightSideObject) {\r\n      const left = (this.leftSideObject instanceof Array)  ? this.leftSideObject : [this.leftSideObject]\r\n      const right = (this.rightSideObject instanceof Array)  ? this.rightSideObject : [this.rightSideObject]\r\n      const comparision = this.toInternalStruction(left, right);\r\n      if (this.categorizeBy) {\r\n        this.sideCategorizedName(comparision.leftSide);\r\n        this.sideCategorizedName(comparision.rightSide);\r\n      }  \r\n      this.leftSide = [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root\",\r\n        index: 0,\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.leftSide\r\n      }];\r\n      this.rightSide= [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root\",\r\n        index: 0,\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.rightSide\r\n      }];\r\n      setTimeout(()=>{\r\n        this.ready = true;\r\n        this.fireCountDifference();\r\n      },333);\r\n    }\r\n  }\r\n  private fireCountDifference() {\r\n    let count = 0;\r\n    this.leftSide[0].children.map( (listItem) => {\r\n      listItem.children.map( (item) => {\r\n        if(item.status !== DifferentiateNodeStatus.default) {\r\n          count++;\r\n        }\r\n      });\r\n    })\r\n    this.ondifference.emit(count);\r\n  }\r\n  private lookupChildOf(side, parentObject, id) {\r\n    let foundItem = undefined;\r\n    if (side.id === id) {\r\n      foundItem = {parent: parentObject, node: side};\r\n    } else if (side.children.length) {\r\n      side.children.map( (item) => {\r\n        if (!foundItem) {\r\n          foundItem = this.lookupChildOf(item, undefined, id);\r\n          if (foundItem && foundItem.parent === undefined) {\r\n            foundItem.parent = side;\r\n          } else if (item.id === id) {\r\n            foundItem = {parent: side, node: item};\r\n          }\r\n        }\r\n      });\r\n    } \r\n    return foundItem;\r\n  }\r\n  private performAdvanceToRight(leftSideInfo, rightSideInfo, status, i) {\r\n    const modifiedChildren = this.leftSide[0].children[i].children;\r\n    if (status === DifferentiateNodeStatus.removed) {\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.added) {\r\n      leftSideInfo.parent.children.splice(leftSideInfo.node.index, 1);\r\n      rightSideInfo.parent.children.splice(rightSideInfo.node.index, 1);\r\n      this.reIndex(leftSideInfo.parent.children);\r\n      this.reIndex(rightSideInfo.parent.children);\r\n    } else if (status === DifferentiateNodeStatus.nameChanged) {\r\n      leftSideInfo.node.name = rightSideInfo.node.name;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.valueChanged) {\r\n      rightSideInfo.node.value = leftSideInfo.node.value;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.typeChanged) {\r\n      leftSideInfo.node.type = rightSideInfo.node.type;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      leftSideInfo.node.children = rightSideInfo.node.children;\r\n    }\r\n    setTimeout(() =>{\r\n      this.onadvance.emit({\r\n        index: i,\r\n        node: this.transformNodeToOriginalStructure(modifiedChildren, DifferentiateNodeType.json)\r\n      });\r\n      this.fireCountDifference();\r\n    }, 66);\r\n  }\r\n  private performAdvanceToLeft(leftSideInfo, rightSideInfo, status, i) {\r\n    const modifiedChildren = this.rightSide[0].children[i].children;\r\n    if (status === DifferentiateNodeStatus.added) {\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.removed) {\r\n      leftSideInfo.parent.children.splice(leftSideInfo.node.index, 1);\r\n      rightSideInfo.parent.children.splice(rightSideInfo.node.index, 1);\r\n      this.reIndex(leftSideInfo.parent.children);\r\n      this.reIndex(rightSideInfo.parent.children);\r\n    } else if (status === DifferentiateNodeStatus.nameChanged) {\r\n      rightSideInfo.node.name = leftSideInfo.node.name;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.valueChanged) {\r\n      leftSideInfo.node.value = rightSideInfo.node.value;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.typeChanged) {\r\n      rightSideInfo.node.type = leftSideInfo.node.type;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      rightSideInfo.node.children = leftSideInfo.node.children;\r\n    }\r\n    setTimeout(() =>{\r\n      this.onrevert.emit({\r\n        index: i,\r\n        node: this.transformNodeToOriginalStructure(modifiedChildren, DifferentiateNodeType.json)\r\n      });\r\n      this.fireCountDifference();\r\n    }, 66);\r\n  }\r\n  advance(event) {\r\n    const index = parseInt(event.node.path.split(\",\")[1]);\r\n\r\n    if (event.type === 'advance') {\r\n      this.performAdvanceToLeft(\r\n        this.lookupChildOf(this.leftSide[0].children[index], this.leftSide[0], event.node.id), \r\n        this.lookupChildOf(this.rightSide[0].children[index], this.rightSide[0], event.node.counterpart), \r\n        event.node.status, index);\r\n    } else {\r\n      this.performAdvanceToRight(\r\n        this.lookupChildOf(this.leftSide[0].children[index], this.leftSide[0], event.node.counterpart), \r\n        this.lookupChildOf(this.rightSide[0].children[index], this.rightSide[0], event.node.id), \r\n        event.node.status, index);\r\n    }\r\n  }\r\n  autoExpand(event) {\r\n    const index = parseInt(event.split(\",\")[1]);\r\n    const lc = this.rightSide[0].children[index];\r\n    const rc = this.leftSide[0].children[index];\r\n    \r\n    lc.collapsed = !lc.collapsed;\r\n    rc.collapsed = !rc.collapsed;\r\n  }\r\n  onhover(event) {\r\n    const index = parseInt(event.path.split(\",\")[1]);\r\n\r\n    this.rightSide[0].children[index].children[event.index].hover = event.hover;\r\n    this.leftSide[0].children[index].children[event.index].hover = event.hover;\r\n  }\r\n}\r\n","/*\r\n * A comparision tree will layout each attribute of a json deep through its heirarchy with given visual queues\r\n * that represents a deletion, adition, or change of attribute from the other tree. The status of each node is \r\n * evaluated by the parent comparision tool.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {DifferentiateNodeStatus} from '../interfaces/differentiate.interfaces';\r\n\r\n@Component({\r\n  selector: 'differentiate-tree',\r\n  templateUrl: './differentiate-tree.component.html',\r\n  styleUrls: ['./differentiate-tree.component.scss'],\r\n})\r\nexport class DifferentiateTree implements OnInit{\r\n  depth: number;\r\n\r\n  @Input(\"collapsed\")\r\n  collapsed = true;\r\n\r\n  @Input(\"children\")\r\n  children;\r\n\r\n  @Input(\"showLeftActionButton\")\r\n  showLeftActionButton = false;\r\n\r\n  @Input(\"showRightActionButton\")\r\n  showRightActionButton = false;\r\n\r\n  @Input(\"status\")\r\n  status = 1;\r\n\r\n  @Input(\"side\")\r\n  side = \"\";\r\n\r\n  @Input(\"level\")\r\n  level = \"0\";\r\n\r\n  @Input(\"objectPath\")\r\n  objectPath = \"\";\r\n\r\n  @Input(\"categorizeBy\")\r\n  categorizeBy: string;\r\n\r\n  @Input(\"leftSideToolTip\")\r\n  leftSideToolTip = \"take left side\";\r\n\r\n  @Input(\"rightSideToolTip\")\r\n  rightSideToolTip = \"take right side\";\r\n\r\n  @Output(\"onhover\")\r\n  onhover = new EventEmitter();\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  @Output(\"onexpand\")\r\n  onexpand = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    this.depth = parseInt(this.level);\r\n  }\r\n\r\n  bubleup(event) {\r\n    event.side = this.side;\r\n    this.onhover.emit(event);\r\n  }\r\n\r\n  keyup(event) {\r\n    const code = event.which;\r\n    if (code === 13) {\r\n      event.target.click();\r\n\t\t}\r\n  }\r\n\r\n  changCounter() {\r\n    let count = 0;\r\n    this.children.map( (item) => {\r\n      if(item.status !== DifferentiateNodeStatus.default) {\r\n        count++;\r\n      }\r\n    })\r\n    return count;\r\n  }\r\n\r\n  expand(event) {\r\n    this.onexpand.emit( this.objectPath );\r\n  }\r\n  autoExpand(event) {\r\n    this.onexpand.emit(event);\r\n  }\r\n  advanceToRightSide(child) {\r\n    child.path = this.objectPath + (this.objectPath.length ? ',':'') + child.index;\r\n    this.onrevert.emit({type:\"advance\", node: child});\r\n  }\r\n  advanceToLeftSide(child) {\r\n    child.path = this.objectPath + (this.objectPath.length ? ',':'') + child.index;\r\n    this.onrevert.emit({type:\"revert\", node: child});\r\n  }\r\n  advance(event) {\r\n    // bubble up the undo event.\r\n    this.onrevert.emit(event);\r\n  }\r\n\r\n  mouseOvered(event, flag, i) {\r\n    event.preventDefault();\r\n\r\n    if (this.depth === 2) {\r\n      event.stopPropagation();\r\n      \r\n      this.onhover.emit({\r\n        hover: flag,\r\n        index: i,\r\n        path: this.objectPath\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DifferentiateComponent } from './components/differentiate.component';\r\nimport { DifferentiateTree } from './components/differentiate-tree.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    DifferentiateComponent,\r\n    DifferentiateTree\r\n  ],\r\n  exports: [\r\n    DifferentiateComponent\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class DifferentiateModule {}\r\n"]}