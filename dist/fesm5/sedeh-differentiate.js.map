{"version":3,"file":"sedeh-differentiate.js","sources":["ng://@sedeh/differentiate/src/app/differentiate/interfaces/differentiate.interfaces.ts","ng://@sedeh/differentiate/src/app/differentiate/components/differentiate.component.ts","ng://@sedeh/differentiate/src/app/differentiate/components/differentiate-tree.component.ts","ng://@sedeh/differentiate/src/app/differentiate/differentiate.module.ts","ng://@sedeh/differentiate/sedeh-differentiate.ts"],"sourcesContent":["\r\nexport enum DifferentiateNodeType {\r\n  literal = 1,\r\n  pair = 2,\r\n  json = 3,\r\n  array = 4\r\n}\r\nexport enum DifferentiateNodeStatus {\r\n  default = 1,\r\n  typeChanged = 2,\r\n  nameChanged = 3,\r\n  valueChanged = 4,\r\n  added = 5,\r\n  removed = 6\r\n}\r\nexport interface DifferentiateNode {\r\n  id: number,\r\n  counterpart?: number,\r\n  index: number,\r\n  name: string,\r\n  altName: string,\r\n  value: string,\r\n  parent: DifferentiateNodeType,\r\n  type: DifferentiateNodeType,\r\n  children: DifferentiateNode[],\r\n  status: DifferentiateNodeStatus,\r\n  isRoot?: boolean\r\n}\r\n\r\n","/*\r\n * Comparision Tool will layout two comparision trees side by side and feed them an internal object\r\n * heirarchy created for internal use from JSON objects given to this component.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  OnChanges,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {\r\n  DifferentiateNode,\r\n  DifferentiateNodeType,\r\n  DifferentiateNodeStatus\r\n} from '../interfaces/differentiate.interfaces';\r\nimport { ThrowStmt } from '@angular/compiler';\r\n\r\n@Component({\r\n  selector: 'differentiate',\r\n  templateUrl: './differentiate.component.html',\r\n  styleUrls: ['./differentiate.component.scss'],\r\n})\r\nexport class DifferentiateComponent implements OnInit, OnChanges {\r\n  \r\n  leftSide;\r\n  rightSide;\r\n  ready: boolean;\r\n  categorizeBy: string[];\r\n\r\n  @Input(\"allowRevert\")\r\n  allowRevert = false;\r\n\r\n  @Input(\"allowAdvance\")\r\n  allowAdvance = false;\r\n\r\n  @Input(\"attributeOrderIsImportant\")\r\n  attributeOrderIsImportant = true;\r\n\r\n  @Input(\"onlyShowDifferences\")\r\n  onlyShowDifferences = false;\r\n\r\n  @Input(\"leftSideObject\")\r\n  leftSideObject\r\n\r\n  @Input(\"rightSideObject\")\r\n  rightSideObject;\r\n\r\n  @Input(\"leftSideToolTip\")\r\n  leftSideToolTip = \"take left side\";\r\n\r\n  @Input(\"rightSideToolTip\")\r\n  rightSideToolTip = \"take right side\";\r\n\r\n  @Input('namedRootObject')\r\n  set namedRootObject(value: string) {\r\n    let x = value.replace(\" \", \"\");\r\n\r\n    if (x.length) {\r\n      this.categorizeBy = value.split(\",\");\r\n    } else {\r\n      this.categorizeBy = undefined;\r\n    }\r\n  }\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  @Output(\"onadvance\")\r\n  onadvance = new EventEmitter();\r\n\r\n  @Output(\"ondifference\")\r\n  ondifference = new EventEmitter();\r\n\r\n  constructor(\t) {\r\n\t  \r\n  }\r\n  private generateNodeId() {\r\n    const min = 1;\r\n    const max = 10000\r\n    return Math.floor(Math.random() * (max - min + 1)) + min;\r\n  }\r\n  private transformNodeToOriginalStructure(node, parent) {\r\n    let json = {};\r\n    let array = [];\r\n\r\n    node.map( (item: DifferentiateNode) => {\r\n      if (item.status !== DifferentiateNodeStatus.removed) {\r\n        if (parent === DifferentiateNodeType.json) {    \r\n          if (item.type === DifferentiateNodeType.literal) {\r\n            array.push(item.value);\r\n          } else if (item.type === DifferentiateNodeType.pair) {\r\n            json[item.name] = item.value;\r\n          } else if (item.type === DifferentiateNodeType.array) {\r\n            const x = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n            if (item.name.length) {\r\n              json[item.name] = x;\r\n            } else {\r\n              json = [x];\r\n            }\r\n          } else if (item.type === DifferentiateNodeType.json) {\r\n            json[item.name] = this.transformNodeToOriginalStructure(item.children, item.parent);\r\n          }\r\n        } else if (parent === DifferentiateNodeType.array){\r\n          if (item.type === DifferentiateNodeType.literal) {\r\n            array.push(item.value);\r\n          } else if (item.type === DifferentiateNodeType.json) {\r\n            array.push(this.transformNodeToOriginalStructure(item.children, item.parent));\r\n          } else if (item.type === DifferentiateNodeType.array) {\r\n            array.push(this.transformNodeToOriginalStructure(item.children, item.parent));\r\n          }\r\n        }\r\n      }\r\n    });\r\n    return array.length ? array : json;\r\n  }\r\n  private transformNodeToInternalStruction(node) {\r\n    let result = node;\r\n    if (node instanceof Array) {\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.array;\r\n      node.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(item);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) =>{\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.array,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: \"\",\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.literal,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }      \r\n      });\r\n      result = children;\r\n    } else if (node instanceof Object) {\r\n      const list = Object.keys(node);\r\n      const children: DifferentiateNode[] = [];\r\n      const p = DifferentiateNodeType.json;\r\n      if (!this.attributeOrderIsImportant) {\r\n        list.sort((a,b) => {return a <= b ? -1: 1});\r\n      }\r\n      list.map( (item, i) => {\r\n        const jsonValue: any = this.transformNodeToInternalStruction(node[item]);\r\n        if (jsonValue instanceof Array) {\r\n          if (!this.attributeOrderIsImportant) {\r\n            jsonValue.sort((a,b) => {return a.name <= b.name ? -1: 1});\r\n            jsonValue.map( (x: DifferentiateNode, i) => {\r\n              x.index = i;\r\n              x.altName = \"\" + i;\r\n            });\r\n          }\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: \"\",\r\n            parent: p,\r\n            type: DifferentiateNodeType.json,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: jsonValue\r\n          });\r\n        } else {\r\n          children.push({\r\n            id: this.generateNodeId(),\r\n            index: i,\r\n            name: item,\r\n            altName: \"\" + i,\r\n            value: jsonValue,\r\n            parent: p,\r\n            type: DifferentiateNodeType.pair,\r\n            status: DifferentiateNodeStatus.default,\r\n            children: []\r\n          });\r\n        }\r\n      });\r\n      result = children;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private itemInArray(side: DifferentiateNode[], node: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    const key = node.type === DifferentiateNodeType.literal ?\r\n                (node.value ? String(node.value).toUpperCase() : \"\") :\r\n                node.type === DifferentiateNodeType.array ?\r\n                node.altName :\r\n                node.name;\r\n\r\n    side.map( (item: DifferentiateNode) => {\r\n      if (item.type === DifferentiateNodeType.literal) {\r\n        if (item.value && String(item.value).toUpperCase() === key) {\r\n          result = item;\r\n        }  \r\n      } else if (item.type === DifferentiateNodeType.array) {\r\n        if (item.altName === key) {\r\n          result = item;\r\n        }  \r\n      } else {\r\n        if (item.name === key) {\r\n          result = item;\r\n        }\r\n      }\r\n    });\r\n    return result;\r\n  }\r\n\r\n  private leftItemFromRightItem(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    let result: DifferentiateNode;\r\n    if (!leftNode || !rightNode) {\r\n      return result;\r\n    }\r\n    const key = rightNode.type === DifferentiateNodeType.literal ?\r\n                    (rightNode.value ? rightNode.value.toUpperCase() : \"\") :\r\n                    rightNode.type === DifferentiateNodeType.array ?\r\n                    rightNode.altName :\r\n                    rightNode.name;\r\n\r\n    if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value && String(leftNode.value).toUpperCase() === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else if (leftNode.type === DifferentiateNodeType.array) {\r\n      if (leftNode.altName === key) {\r\n        result = leftNode;\r\n      }  \r\n    } else {\r\n      if (leftNode.name === key) {\r\n        result = leftNode;\r\n      }\r\n    }\r\n    return result;\r\n  }\r\n\r\n  private compare(leftNode: DifferentiateNode, rightNode: DifferentiateNode) {\r\n    if (leftNode.type !== rightNode.type) {\r\n      leftNode.status = DifferentiateNodeStatus.typeChanged;\r\n      rightNode.status = DifferentiateNodeStatus.typeChanged;\r\n      leftNode.counterpart = rightNode.id;\r\n      rightNode.counterpart = leftNode.id;\r\n    } else if (leftNode.type === DifferentiateNodeType.literal) {\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else if (leftNode.type === DifferentiateNodeType.pair) {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      if (leftNode.value !== rightNode.value) {\r\n        leftNode.status = DifferentiateNodeStatus.valueChanged;\r\n        rightNode.status = DifferentiateNodeStatus.valueChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n    } else {\r\n      if (leftNode.name !== rightNode.name) {\r\n        leftNode.status = DifferentiateNodeStatus.nameChanged;\r\n        rightNode.status = DifferentiateNodeStatus.nameChanged;\r\n        leftNode.counterpart = rightNode.id;\r\n        rightNode.counterpart = leftNode.id;\r\n      }\r\n      this.unify(leftNode.children, rightNode.children);\r\n    }\r\n  }\r\n  private reIndex(list: DifferentiateNode[]) {\r\n    list.map((item, i) => {\r\n      item.index = i;\r\n      this.reIndex(item.children);\r\n    });\r\n  }\r\n  private copyInto(\r\n              side: DifferentiateNode[],\r\n              item: DifferentiateNode,\r\n              index: number,\r\n              status: DifferentiateNodeStatus) {\r\n    \r\n    if (item) {\r\n      const newItem = JSON.parse(JSON.stringify(item));\r\n      side.splice(index, 0, newItem);\r\n      this.reIndex(side);\r\n  \r\n      item.status = status;\r\n      newItem.status = status;\r\n      item.counterpart = newItem.id;\r\n      newItem.counterpart = item.id;\r\n      this.setChildrenStatus(item.children, status)\r\n      this.setChildrenStatus(newItem.children, status)\r\n    }\r\n  }\r\n  private setChildrenStatus(list, status){\r\n    list.map( (x) => {\r\n      x.status = status;\r\n      this.setChildrenStatus(x.children, status)\r\n    });\r\n  }\r\n  private unify(leftSide: DifferentiateNode[], rightSide: DifferentiateNode[]) {\r\n    let i = 0, j = 0, looping = true;\r\n\r\n    while (looping) {\r\n      let leftItemInRightSide: DifferentiateNode = i < leftSide.length ? this.itemInArray(rightSide, leftSide[i]) : undefined;\r\n      let rightItemInLeftSide: DifferentiateNode = j < rightSide.length ? this.itemInArray(leftSide, rightSide[j]) : undefined;\r\n\r\n      if (!leftItemInRightSide && i < leftSide.length) {\r\n        if (!rightSide.length) {\r\n          while (i < leftSide.length) {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!rightItemInLeftSide && j < rightSide.length) {\r\n        if (!leftSide.length) {\r\n          while (j < rightSide.length) {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        } else {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n        }\r\n      }\r\n      if (!leftItemInRightSide) {\r\n        leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n      }\r\n      if (!rightItemInLeftSide) {\r\n        rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n      }\r\n      if (leftItemInRightSide && leftItemInRightSide.index !== i) {\r\n        while (i < leftSide.length) {\r\n          leftItemInRightSide = this.leftItemFromRightItem(rightSide[i], leftSide[i]);\r\n          if (leftItemInRightSide) {\r\n            leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n            j++;i++;\r\n          }\r\n        }  \r\n      }\r\n      if (rightItemInLeftSide && rightItemInLeftSide.index !== j) {\r\n        while (j < rightSide.length) {\r\n          rightItemInLeftSide = this.leftItemFromRightItem(leftSide[j], rightSide[j]);\r\n          if (rightItemInLeftSide) {\r\n            rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n            break;\r\n          } else {\r\n            this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n            j++;i++;\r\n          }\r\n        }\r\n      }\r\n      if (leftItemInRightSide && i < leftSide.length) {\r\n        let x = this.itemInArray(rightSide, leftSide[i]);\r\n        if (x && x.index !== leftItemInRightSide.index) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          j++;i++;\r\n          leftItemInRightSide = j < rightSide.length ? rightSide[j] : undefined;\r\n        }\r\n      }\r\n      if (rightItemInLeftSide && j < rightSide.length) {\r\n        let x = this.itemInArray(leftSide, rightSide[j]);\r\n        if (x && x.index !== rightItemInLeftSide.index) {\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n          j++;i++;\r\n          rightItemInLeftSide = i < leftSide.length ? leftSide[i] : undefined;\r\n        }\r\n      }\r\n      if (leftItemInRightSide && rightItemInLeftSide) {\r\n        if (leftItemInRightSide.parent !== rightItemInLeftSide.parent) {\r\n          this.copyInto(leftSide, rightSide[j], j, DifferentiateNodeStatus.added);\r\n          this.copyInto(rightSide, leftSide[i], i, DifferentiateNodeStatus.removed);\r\n        } else {\r\n          this.compare(leftItemInRightSide, rightItemInLeftSide);\r\n        }\r\n        j++;i++;\r\n      }\r\n      looping = (i < leftSide.length || j < rightSide.length);\r\n    }\r\n  }\r\n  private toInternalStruction(leftNode, rightNode) {\r\n    const result = {\r\n      leftSide: this.transformNodeToInternalStruction(leftNode),\r\n      rightSide: this.transformNodeToInternalStruction(rightNode)\r\n    };\r\n    this.unify(result.leftSide, result.rightSide);\r\n\r\n    if (this.onlyShowDifferences) {\r\n      result.leftSide = this.filterUnchanged(result.leftSide);\r\n      result.rightSide = this.filterUnchanged(result.rightSide);\r\n    }\r\n  \r\n    return result;\r\n  }\r\n  private filterUnchanged(list: DifferentiateNode[]) {\r\n    const result = [];\r\n    \r\n    list.map( (item) => {\r\n      item.children = this.filterUnchanged(item.children);\r\n      if ((item.type > DifferentiateNodeType.pair && item.children.length) ||\r\n          item.status !== DifferentiateNodeStatus.default) {\r\n        result.push(item);\r\n      }\r\n    });\r\n    result.map( (x: DifferentiateNode, i) => {\r\n      x.index = i;\r\n      x.altName = \"\" + i;\r\n    });\r\n    return result;\r\n  }\r\n\r\n  ngOnChanges(changes) {\r\n    if (changes.attributeOrderIsImportant ||\r\n      changes.onlyShowDifferences ||\r\n      changes.leftSideObject ||\r\n      changes.namedRootObject ||\r\n      changes.rightSideObject) {\r\n      this.ready = false;\r\n      this.ngOnInit();\r\n    }\r\n  }\r\n\r\n  ngOnInit() {\r\n    setTimeout(()=>this.init(),666);\r\n  }\r\n  private categorizedName(item) {\r\n    let name = \"\";\r\n    this.categorizeBy.map((category) => {\r\n      if (item.name === category) {\r\n        name = item.value;\r\n      }\r\n    });\r\n    return name;\r\n  }\r\n  private sideCategorizedName(side) {\r\n    side.map( (item) => {\r\n      const names = [];\r\n      item.children.map((child) => {\r\n        const name = this.categorizedName(child);\r\n        if(String(name).length) {\r\n          names.push(name);\r\n        }\r\n      });\r\n      item.categorizeBy = names.length > 1 ? names.join(\" - \") : names[0];\r\n      item.collapsed = true;\r\n    });\r\n  }\r\n  private init() {\r\n    if (this.leftSideObject && this.rightSideObject) {\r\n      const left = (this.leftSideObject instanceof Array)  ? this.leftSideObject : [this.leftSideObject]\r\n      const right = (this.rightSideObject instanceof Array)  ? this.rightSideObject : [this.rightSideObject]\r\n      const comparision = this.toInternalStruction(left, right);\r\n      if (this.categorizeBy) {\r\n        this.sideCategorizedName(comparision.leftSide);\r\n        this.sideCategorizedName(comparision.rightSide);\r\n      }  \r\n      this.leftSide = [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root\",\r\n        index: 0,\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.leftSide\r\n      }];\r\n      this.rightSide= [{\r\n        id: this.generateNodeId(),\r\n        name: \"\",\r\n        value: \"Root\",\r\n        index: 0,\r\n        parent: DifferentiateNodeType.array,\r\n        type: DifferentiateNodeType.array,\r\n        expanded: true,\r\n        isRoot: true,\r\n        children: comparision.rightSide\r\n      }];\r\n      setTimeout(()=>{\r\n        this.ready = true;\r\n        this.fireCountDifference();\r\n      },333);\r\n    }\r\n  }\r\n  private fireCountDifference() {\r\n    let count = 0;\r\n    this.leftSide[0].children.map( (listItem) => {\r\n      listItem.children.map( (item) => {\r\n        if(item.status !== DifferentiateNodeStatus.default) {\r\n          count++;\r\n        }\r\n      });\r\n    })\r\n    this.ondifference.emit(count);\r\n  }\r\n  private lookupChildOf(side, parentObject, id) {\r\n    let foundItem = undefined;\r\n    if (side.id === id) {\r\n      foundItem = {parent: parentObject, node: side};\r\n    } else if (side.children.length) {\r\n      side.children.map( (item) => {\r\n        if (!foundItem) {\r\n          foundItem = this.lookupChildOf(item, undefined, id);\r\n          if (foundItem && foundItem.parent === undefined) {\r\n            foundItem.parent = side;\r\n          } else if (item.id === id) {\r\n            foundItem = {parent: side, node: item};\r\n          }\r\n        }\r\n      });\r\n    } \r\n    return foundItem;\r\n  }\r\n  private performAdvanceToRight(leftSideInfo, rightSideInfo, status, i) {\r\n    const modifiedChildren = this.leftSide[0].children[i].children;\r\n    if (status === DifferentiateNodeStatus.removed) {\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.added) {\r\n      leftSideInfo.parent.children.splice(leftSideInfo.node.index, 1);\r\n      rightSideInfo.parent.children.splice(rightSideInfo.node.index, 1);\r\n      this.reIndex(leftSideInfo.parent.children);\r\n      this.reIndex(rightSideInfo.parent.children);\r\n    } else if (status === DifferentiateNodeStatus.nameChanged) {\r\n      leftSideInfo.node.name = rightSideInfo.node.name;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.valueChanged) {\r\n      rightSideInfo.node.value = leftSideInfo.node.value;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.typeChanged) {\r\n      leftSideInfo.node.type = rightSideInfo.node.type;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      leftSideInfo.node.children = rightSideInfo.node.children;\r\n    }\r\n    setTimeout(() =>{\r\n      this.onadvance.emit({\r\n        index: i,\r\n        node: this.transformNodeToOriginalStructure(modifiedChildren, DifferentiateNodeType.json)\r\n      });\r\n      this.fireCountDifference();\r\n    }, 66);\r\n  }\r\n  private performAdvanceToLeft(leftSideInfo, rightSideInfo, status, i) {\r\n    const modifiedChildren = this.rightSide[0].children[i].children;\r\n    if (status === DifferentiateNodeStatus.added) {\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.removed) {\r\n      leftSideInfo.parent.children.splice(leftSideInfo.node.index, 1);\r\n      rightSideInfo.parent.children.splice(rightSideInfo.node.index, 1);\r\n      this.reIndex(leftSideInfo.parent.children);\r\n      this.reIndex(rightSideInfo.parent.children);\r\n    } else if (status === DifferentiateNodeStatus.nameChanged) {\r\n      rightSideInfo.node.name = leftSideInfo.node.name;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.valueChanged) {\r\n      leftSideInfo.node.value = rightSideInfo.node.value;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      this.setChildrenStatus(rightSideInfo.node.children, rightSideInfo.node.status)\r\n    } else if (status === DifferentiateNodeStatus.typeChanged) {\r\n      rightSideInfo.node.type = leftSideInfo.node.type;\r\n      rightSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      leftSideInfo.node.status = DifferentiateNodeStatus.default;\r\n      this.setChildrenStatus(leftSideInfo.node.children, leftSideInfo.node.status)\r\n      rightSideInfo.node.children = leftSideInfo.node.children;\r\n    }\r\n    setTimeout(() =>{\r\n      this.onrevert.emit({\r\n        index: i,\r\n        node: this.transformNodeToOriginalStructure(modifiedChildren, DifferentiateNodeType.json)\r\n      });\r\n      this.fireCountDifference();\r\n    }, 66);\r\n  }\r\n  advance(event) {\r\n    const index = parseInt(event.node.path.split(\",\")[1]);\r\n\r\n    if (event.type === 'advance') {\r\n      this.performAdvanceToLeft(\r\n        this.lookupChildOf(this.leftSide[0].children[index], this.leftSide[0], event.node.id), \r\n        this.lookupChildOf(this.rightSide[0].children[index], this.rightSide[0], event.node.counterpart), \r\n        event.node.status, index);\r\n    } else {\r\n      this.performAdvanceToRight(\r\n        this.lookupChildOf(this.leftSide[0].children[index], this.leftSide[0], event.node.counterpart), \r\n        this.lookupChildOf(this.rightSide[0].children[index], this.rightSide[0], event.node.id), \r\n        event.node.status, index);\r\n    }\r\n  }\r\n  autoExpand(event) {\r\n    const index = parseInt(event.split(\",\")[1]);\r\n    const lc = this.rightSide[0].children[index];\r\n    const rc = this.leftSide[0].children[index];\r\n    \r\n    lc.collapsed = !lc.collapsed;\r\n    rc.collapsed = !rc.collapsed;\r\n  }\r\n  onhover(event) {\r\n    const index = parseInt(event.path.split(\",\")[1]);\r\n\r\n    this.rightSide[0].children[index].children[event.index].hover = event.hover;\r\n    this.leftSide[0].children[index].children[event.index].hover = event.hover;\r\n  }\r\n}\r\n","/*\r\n * A comparision tree will layout each attribute of a json deep through its heirarchy with given visual queues\r\n * that represents a deletion, adition, or change of attribute from the other tree. The status of each node is \r\n * evaluated by the parent comparision tool.\r\n */\r\nimport {\r\n  Component,\r\n  OnInit,\r\n  Input,\r\n  Output,\r\n  EventEmitter\r\n} from '@angular/core';\r\n\r\nimport {DifferentiateNodeStatus} from '../interfaces/differentiate.interfaces';\r\n\r\n@Component({\r\n  selector: 'differentiate-tree',\r\n  templateUrl: './differentiate-tree.component.html',\r\n  styleUrls: ['./differentiate-tree.component.scss'],\r\n})\r\nexport class DifferentiateTree implements OnInit{\r\n  depth: number;\r\n\r\n  @Input(\"collapsed\")\r\n  collapsed = true;\r\n\r\n  @Input(\"children\")\r\n  children;\r\n\r\n  @Input(\"showLeftActionButton\")\r\n  showLeftActionButton = false;\r\n\r\n  @Input(\"showRightActionButton\")\r\n  showRightActionButton = false;\r\n\r\n  @Input(\"status\")\r\n  status = 1;\r\n\r\n  @Input(\"side\")\r\n  side = \"\";\r\n\r\n  @Input(\"level\")\r\n  level = \"0\";\r\n\r\n  @Input(\"objectPath\")\r\n  objectPath = \"\";\r\n\r\n  @Input(\"categorizeBy\")\r\n  categorizeBy: string;\r\n\r\n  @Input(\"leftSideToolTip\")\r\n  leftSideToolTip = \"take left side\";\r\n\r\n  @Input(\"rightSideToolTip\")\r\n  rightSideToolTip = \"take right side\";\r\n\r\n  @Output(\"onhover\")\r\n  onhover = new EventEmitter();\r\n\r\n  @Output(\"onrevert\")\r\n  onrevert = new EventEmitter();\r\n\r\n  @Output(\"onexpand\")\r\n  onexpand = new EventEmitter();\r\n\r\n  ngOnInit() {\r\n    this.depth = parseInt(this.level);\r\n  }\r\n\r\n  bubleup(event) {\r\n    event.side = this.side;\r\n    this.onhover.emit(event);\r\n  }\r\n\r\n  keyup(event) {\r\n    const code = event.which;\r\n    if (code === 13) {\r\n      event.target.click();\r\n\t\t}\r\n  }\r\n\r\n  changCounter() {\r\n    let count = 0;\r\n    this.children.map( (item) => {\r\n      if(item.status !== DifferentiateNodeStatus.default) {\r\n        count++;\r\n      }\r\n    })\r\n    return count;\r\n  }\r\n\r\n  expand(event) {\r\n    this.onexpand.emit( this.objectPath );\r\n  }\r\n  autoExpand(event) {\r\n    this.onexpand.emit(event);\r\n  }\r\n  advanceToRightSide(child) {\r\n    child.path = this.objectPath + (this.objectPath.length ? ',':'') + child.index;\r\n    this.onrevert.emit({type:\"advance\", node: child});\r\n  }\r\n  advanceToLeftSide(child) {\r\n    child.path = this.objectPath + (this.objectPath.length ? ',':'') + child.index;\r\n    this.onrevert.emit({type:\"revert\", node: child});\r\n  }\r\n  advance(event) {\r\n    // bubble up the undo event.\r\n    this.onrevert.emit(event);\r\n  }\r\n\r\n  mouseOvered(event, flag, i) {\r\n    event.preventDefault();\r\n\r\n    if (this.depth === 2) {\r\n      event.stopPropagation();\r\n      \r\n      this.onhover.emit({\r\n        hover: flag,\r\n        index: i,\r\n        path: this.objectPath\r\n      });\r\n    }\r\n  }\r\n}\r\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { DifferentiateComponent } from './components/differentiate.component';\r\nimport { DifferentiateTree } from './components/differentiate-tree.component';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule\r\n  ],\r\n  declarations: [\r\n    DifferentiateComponent,\r\n    DifferentiateTree\r\n  ],\r\n  exports: [\r\n    DifferentiateComponent\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  providers: [\r\n  ],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA]\r\n})\r\n\r\nexport class DifferentiateModule {}\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n"],"names":["tslib_1.__decorate"],"mappings":"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"}